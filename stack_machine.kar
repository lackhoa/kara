(def (new-stack) (list))
(def (push stack item) (cons item stack))
(def (pop-item stack) (car stack))
(def (pop-stack stack) (cdr stack))


(def (stack-machine inputs op-stack data-stack)
  (cond [(eq? (car inputs) (quote +))
         (stack-machine (cdr inputs)
                        (push (push op-stack +) 2)
                        data-stack)]
        [(eq? (car inputs) (quote -))
         (stack-machine (cdr inputs)
                        (push (push op-stack -) 2)
                        data-stack)]
        [(eq? (car inputs) (quote *))
         (stack-machine (cdr inputs)
                        (push (push op-stack *) 2)
                        data-stack)]
        [(eq? (car inputs) (quote /))
         (stack-machine (cdr inputs)
                        (push (push op-stack /) 2)
                        data-stack)]
         

        [(null? op-stack) (car inputs)]

        [(= (pop-item op-stack) 1)
         (def op-stack (pop-stack op-stack))
         (def operator (pop-item op-stack))
         (def op-stack (pop-stack op-stack))
         (def datum (pop-item data-stack))
         (def data-stack (pop-stack data-stack))

         (stack-machine (cons (operator datum (car inputs))
                              (cdr inputs))
                        op-stack
                        data-stack)]

        [else (stack-machine (cdr inputs)
                             (push (pop-stack op-stack) 1)
                             (push data-stack (car inputs)))]))

(def (start-stack-machine input)
  (stack-machine input (new-stack) (new-stack)))
(trace stack-machine)
(start-stack-machine '(+ + 1 2 3))
(start-stack-machine '(+ 8 - 2 3))






