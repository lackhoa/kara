(set! my-display
  '(seq (newline) (newline) (display $0) (newline) (newline)))

(my-display "Setting and retrieving a variable")
(set! a 5)
a

(my-display "If true")
(if #t 1 2)

(my-display "If false")
(if #f 1 2)

(my-display "Conditional first")
(cond (#t 1) (#f 2) (else 3))

(my-display "Conditional second")
(cond (#f 1) (#t 2) (else 3))

(my-display "Conditional else")
(cond (#f 1) (#f 2) (else 3))

(my-display "Apply complex primitive procedure")
(+ (+ 2 8) 2)

(my-display "Apply compound procedure 1")
(''z)

(my-display "Apply compound procedure 2")
('z (** z 6))

(my-display "Apply compound procedure 3")
('(+ x y) (** x 7) (** y 8))

(my-display "Apply compound procedure 4")
('$0 7)

(my-display "Apply compound procedure 5")
('(+ $0 $1) 7 13)

(my-display "Both keyword and non-keyword")
('(* mult $0) 7 (** mult 8))

(my-display "Store procedure and use them later")
(set! add3 '(+ 3 $0))
(add3 7)

(my-display "map procedure")
(set! map '(if (null? L) '() (cons (func (car L)) (map (** L (cdr L)) (** func func)))))
(map (** func add3) (** L (list 0 1 2 3 4 5)))

(my-display "Currying")
(set! partial (quote (subtract (** $0 9))))
(partial (** $1 27))

(my-display "Over-interpretuation behavior")
((+ 3 4))

(my-display "Sequencing")
(seq (set! x 9) (* x 4))

(my-display "Factorial")
(set! fact '(if (= $0 1) 1 (* (fact (- $0 1)) $0)))
(fact 3)

(my-display "Environment request: print all keys")
(hashtable-keys (car meta-env))
