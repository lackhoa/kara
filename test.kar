(set! my-display
  '(seq (newline) (display $0) (newline)))

(my-display "Setting and retrieving a variable: 5")
(set! a 5)
a

(my-display "If true: 1")
(if #t 1 2)

(my-display "If false: 2")
(if #f 1 2)

(my-display "If no else: 5")
(seq (set! const 5) (if #f (set! const 6) const))

(my-display "Conditional first: 1")
(cond (#t 1) (#f 2) (else 3))

(my-display "Conditional second: 2")
(cond (#f 1) (#t 2) (else 3))

(my-display "Conditional else: 3")
(cond (#f 1) (#f 2) (else 3))

(my-display "Conditional without else: (void)")
(cond (#f 1) (#f 2))

(my-display "Apply complex primitive procedure: 12")
(+ (+ 2 8) 2)

(my-display "Apply compound procedure 1: z")
(''z)

(my-display "Apply compound procedure 2: 6")
('z (** z 6))

(my-display "Apply compound procedure: 15")
('(+ x y) (** x 7) (** y 8))

(my-display "Apply compound procedure 4: 7")
('$0 7)

(my-display "Apply compound procedure 5: 20")
('(+ $0 $1) 7 13)

(my-display "Both keyword and non-keyword: 56")
('(* mult $0) 7 (** mult 8))

(my-display "Store procedure and use them later: 10")
(set! add3 '(+ 3 $0))
(add3 7)

(my-display "map procedure: (3...8)")
(set! map '(if (null? L) '() (cons (func (car L)) (map (** L (cdr L)) (** func func)))))
(map (** func add3) (** L (list 0 1 2 3 4 5)))

(my-display "Currying: -18")
(set! partial (quote (subtract (** $0 9))))
(partial (** $1 27))

(my-display "Over-interpretuation behavior: 7")
((+ 3 4))

(my-display "Sequencing: 36")
(seq (set! x 9) (* x 4))

(my-display "Factorial: 6")
(set! fact '(if (= $0 1) 1 (* (fact (- $0 1)) $0)))
(fact 3)

(my-display "Environment request: all keys")
(hashtable-keys (car meta-env))

(my-display "Primitive => 8")
(!p (let ((x 5)) (+ 3 x)))
