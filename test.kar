(load "io.kar")

(stdisplay-n "Setting and retrieving a variable => 5")
(def a 5)
a

(stdisplay-n "If true => 1")
(if #t 1 2)

(stdisplay-n "If false => 2")
(if #f 1 2)

(stdisplay-n "If no else => 5")
(seq (def const 5) (if #f (def const 6) const))

(stdisplay-n "Conditional first => 1")
(cond (#t 1) (#f 2) (else 3))

(stdisplay-n "Conditional second => 2")
(cond (#f 1) (#t 2) (else 3))

(stdisplay-n "Conditional else => 3")
(cond (#f 1) (#f 2) (else 3))

(stdisplay-n "Conditional without else => (void)")
(cond (#f 1) (#f 2))

(stdisplay-n "Apply complex primitive procedure => 12")
(+ (+ 2 8) 2)

(stdisplay-n "Apply compound procedure 1 => z")
((const () 'z))

(stdisplay-n "Apply compound procedure 2 => 6")
((lambda (z) z) z 6)

(stdisplay-n "Apply compound procedure => 15")
((lambda (x y) (+ x y)) 7 8)

(stdisplay-n "Store procedure and use them later => 10")
(def add3 (lambda ($) (+ 3 $)))
(add3 7)

(stdisplay-n "map procedure => (3...8)")
(map add3 (list 0 1 2 3 4 5))

(stdisplay-n "Sequencing => 36")
(seq (def x 9) (* x 4))

(stdisplay-n "Factorial => 6")
(def fact (lambda ($) (if (= $ 1) 1 (* (fact (-  1)) $))))
(fact 3)

(stdisplay-n "Environment request => all keys")
(hash-keys (car (meta-env)))

(stdisplay-n "Primitive => 8")
(! '(let ((x 5)) (+ 3 x)))

(stdisplay-n "Quasiquotation1 => (10 (18 18) 72)")
(def a 9)
'(10 (18 ,(+ 9 a)) ,(+ (* 8 8) 8))

(stdisplay-n "Quasiquotation2 => (10 '(18 20) 72)")
(def b 11)
'(10 '(18 ,,(+ 9 b)) ,(+ (* 8 8) 8))

(stdisplay-n "Quasiquotation2 => (10 '(18 ,(+ 9 a)) 72)")
'(10 '(18 ,(+ 9 a)) ,(+ (* 8 8) 8))

(stdisplay-n "String formating => Hi mom and dad")
(format "Hi ~s and ~s" '(mom dad))

(stdisplay-n "Tracing => fibonacci")
(def (fibo $)
    '(cond
        [(= $ 0) 1] [(= $ 1) 1]
        [else (+ (fibo (- $ 1)) (fibo (- $ 2)))]))
(trace fibo)
(fibo 3)

; The ultimate test of speed
; (def fibo
    ; '(cond
        ; [(= $0 0) 1] [(= $0 1) 1]
        ; [else (+ (fibo (- $0 1)) (fibo (- $0 2)))]))
; (fibo 20)







