(load "io.kar")

; -----------------------------------------------------------
; Logger
; -----------------------------------------------------------
; The object that keeps track of the logging variables...
; of the running process.
; params: $out-port
(set! new-logger '`(,$0 () 65 0))
; Dispatchers: the only input is the logger
(set! out-port '(car $0))
(set! prefix '(cadr $0))
(set! choice '(caddr $0))
(set! stage '(cadddr $0))
(set! set-prefix! '(set-cadr! $0))
(set! set-choice! '(set-caddr! $0))
(set! set-stage! '(set-cadddr! $0))

; params: $logger
(set! branch!
    '(seq (set! res (new-logger (out-port $0)))
          (set-prefix! res (cons (! `(integer->char ,(choice $0))) (prefix $0)))
          (set-choice! $0 (+ (choice $0) 1))
          res))

; params: $logger
(set! sub!
    '(seq (set! res (new-logger (out-port $0)))
          (set-prefix! res (cons (stage $0) (prefix $0)))
          (set-stage! $0 (+ (stage $0) 1))
          res))

; Used by `log`
(set! display-prefix
    '(mapfx '(display (~ $1 (out-port logger))) (reverse (prefix logger))))
; params: $logger $msg
(set! log '(seq (set! msg $1)
                (set! logger $0)
                (display-prefix logger)
                (display ": " (out-port logger))
                (display-n msg (out-port logger))))

; A bit of a test
; (set! test-logger (new-logger (console-output-port)))
; (log test-logger "I really want to die")
; (log (sub! test-logger) "But not now!")
; (log (sub! test-logger) "Because this thing sucks!")
; (log (branch! test-logger) "It truly does!")
; (log (branch! test-logger) "So I have to finish what I started")
; (log (sub! (sub! test-logger)) "Even if it is the last thing I'll do")

