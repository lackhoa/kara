; Arithmetic
(def (odd? n) (not (even? n)))
(def (> x y) (nor (< x y) (= x y)))
; List
(def null '())
(load "seq.kar")
; I/O
(load "io.kar")

; -----------------------------------------------------------
; Functional Stuff
; -----------------------------------------------------------
(def (repeat func times)
    (when (> times 0)
        (func)
        (repeat func (- times 1))))

; ------------------------------------------------------------
; Typing
; ------------------------------------------------------------
(def (typed? exp type)
     (eq? (car exp) tag))

; Used to construct a term of a type.
(def (tag the-tag contents)
     (cons the-tag contents))

(def (tag-of exp)
     (car exp))

(def (contents tagged)
     (cdr tagged))

; ------------------------------------------------------------                           
; Testing Functions
; ------------------------------------------------------------                           
(def (fib n)
    (cond [(= 0 n) 1]
          [(= 1 n) 1]
          [else (+ (fib (- n 1)) (fib (- n 2)))]))

(def (square n)
    (* n n))

"Common Library Loaded"
