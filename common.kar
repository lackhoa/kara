; Arithmetic
(set! odd? '(not (even?)))
(set! > '(< $1 $0))

; List
(set! cadr '(car (cdr)))
(set! cddr '(cdr (cdr)))
(set! caddr '(car (cddr)))
(set! cdddr '(cdr (cddr)))
(set! cadddr '(car (cdddr)))
(set! set-cadr! '(set-car! (cdr $0) $1))
(set! set-caddr! '(set-car! (cddr $0) $1))
(set! set-cadddr! '(set-car! (cdddr $0) $1))
(set! pair? '(not (null?)))
(set! append '(! '(append ',,$0 ',,$1)))
; params: $0 (list), $1 (index)
(set! list-ref
    '(if (= $1 0) (car $0) (list-ref (cdr $0) (- $1 1))))
(set! list-clone
    '(if (null?) '() (cons (car) (list-clone (cdr)))))
(set! reverse '(! '(reverse ',,$0)))

; String
(set! string-append '(! '(string-append $0 $1)))

; -----------------------------------------------------------
; Functional stuff
; -----------------------------------------------------------
; params: func, $list
(set! map
    '(if (null? $0)
         '()
         (cons (func (car $0)) (map (cdr $0)))))

; Map for use with side effect (doesn't return anything)
; params: func, $list
(set! mapfx
    '(if (null? $0)
         'done
         (seq (func (car $0)) (mapfx (cdr $0)))))

; params: $function, $(how many times to repeat)
(set! repeat '(if (> $1 0) (seq ($0) (repeat (~ $1 (- $1 1))))))

; -----------------------------------------------------------
; I/O
; -----------------------------------------------------------
(set! current-output-port '(! '(current-output-port)))
